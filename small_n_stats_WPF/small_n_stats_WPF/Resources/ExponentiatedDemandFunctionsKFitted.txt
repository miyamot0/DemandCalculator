# 
#    Copyright 2016 Shawn Gilroy
#
#    This file is part of Demand Analysis.
#
#    Demand Analysis is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Demand Analysis is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Demand Analysis.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#
#    Demand Analysis incorporates source from Beezdemand to compute the following  
#    demand measures:
#        OmaxE
#        PmaxE
#        Q0e
#        BP0
#        BP1
#        EV
#        OmaxD
#        PmaxD
#
#    ================================================================================
# 
#    Beezdemand is distributed under this license:
#
#    Copyright 2016 Brent Kaplan
#
#    Beezdemand is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Beezdemand is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Beezdemand.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#

SourceFrame <- data.frame(
  p=pLoad,
  y=yLoad,
  x=xLoad)

nSimulated <- length(unique(SourceFrame$p))

fitFrameTemp <- data.frame(
  p=seq(1,nSimulated,1),
  q0=rep(NA,nSimulated),
  q0err=rep(NA,nSimulated),
  alpha=rep(NA,nSimulated),
  alphaerr=rep(NA,nSimulated),
  k=rep(NA,nSimulated),
  r2=rep(NA,nSimulated),
  absSS=rep(NA,nSimulated),
  sdResid=rep(NA,nSimulated),
  q0low=rep(NA,nSimulated),
  q0high=rep(NA,nSimulated),
  alow=rep(NA,nSimulated),
  ahigh=rep(NA,nSimulated),
  EV=rep(NA,nSimulated),
  OmaxD=rep(NA,nSimulated),
  PmaxD=rep(NA,nSimulated))

fitFrame <- data.frame(
  p=seq(1,1,1),
  q0=rep(NA,1),
  q0err=rep(NA,1),
  alpha=rep(NA,1),
  alphaerr=rep(NA,1),
  k=rep(NA,1),
  r2=rep(NA,1),
  absSS=rep(NA,1),
  sdResid=rep(NA,1),
  q0low=rep(NA,1),
  q0high=rep(NA,1),
  alow=rep(NA,1),
  ahigh=rep(NA,1),
  EV=rep(NA,1),
  OmaxD=rep(NA,1),
  PmaxD=rep(NA,1))

  fittedK <- NULL

  dataHolder <- NULL
  dataHolder <- SourceFrame

  ###
  startList <- list(q0=3, k=3, alpha=0.000000001)
  upperList <- c(q0=maxQ0, k=maxK, alpha = 1)
  lowerList <- c(q0=minQ0, k=minK, alpha = -1)
  ###

  if (!is.null(FixedQ0))
  {
    q0 <<- FixedQ0  
    
    itemNames <- names(startList)
    index <- which(itemNames == "q0")

    startList <- startList[-index]
    upperList <- upperList[-index]
    lowerList <- lowerList[-index]
  }
  
  fit <- NULL
  try(fit <- wrapnls(data=dataHolder, y ~ q0 * 10^(k * (exp(-alpha*q0*x)-1)), 
		start= startList,
		upper= upperList,
		lower= lowerList,
        trace=FALSE, 
		control = list(maxiter = 1000, smallsstest=FALSE, femax=10000, minFactor=0.000000000001)), 
  silent=FALSE)
  
  if (!is.null(fit))
  {
    fitFrame[1,]$alpha <- as.numeric(coef(fit)["alpha"])

	varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
    index <- which(varNames == "alpha")   
    fitFrame[1,]$alphaerr <- summary(fit)[[10]][index,2]    

    varNames <- attr(confint2(fit), "dimnames")[[1]]
    index <- which(varNames == "alpha")
    fitFrame[1,]$alow <- confint2(fit)[index,1]
    fitFrame[1,]$ahigh <- confint2(fit)[index,2]

    if (!is.null(FixedQ0)) {
      fitFrame[1,]$q0 <- q0
    } else {
      fitFrame[1,]$q0 <- as.numeric(coef(fit)["q0"])
      varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
      index <- which(varNames == "q0")         
      fitFrame[1,]$q0err <- summary(fit)[[10]][index,2]
      
      varNames <- attr(confint2(fit), "dimnames")[[1]]
      index <- which(varNames == "q0")
      fitFrame[1,]$q0low <- confint2(fit)[index,1]
      fitFrame[1,]$q0high <- confint2(fit)[index,2]      
    }

    #fitFrame[1,]$q0 <- as.numeric(coef(fit)["q0"])
    #fitFrame[1,]$alpha <- as.numeric(coef(fit)["alpha"])
    fitFrame[1,]$k <- as.numeric(coef(fit)["k"])
    #fitFrame[1,]$q0err <- summary(fit)[[10]][1,2]
    #fitFrame[1,]$alphaerr <- summary(fit)[[10]][3,2]
	fitFrame[1,]$r2 <- 1.0 -(deviance(fit)/sum((dataHolder$y - mean(dataHolder$y))^2))
    fitFrame[1,]$absSS <- deviance(fit)
    fitFrame[1,]$sdResid <- sqrt(deviance(fit)/df.residual(fit))
    #fitFrame[1,]$q0low <- confint2(fit)[1]
    #fitFrame[1,]$q0high <- confint2(fit)[4]
    #fitFrame[1,]$alow <- confint2(fit)[3]
    #fitFrame[1,]$ahigh <- confint2(fit)[6]    

	fittedK <<- as.numeric(coef(fit)["k"])

	fitFrame[1,]$EV <- 1/(fitFrame[1,]$alpha * (fitFrame[1,]$k ^ 1.5) * 100)
	fitFrame[1,]$PmaxD <- 1/(fitFrame[1,]$q0 * fitFrame[1,]$alpha * (fitFrame[1,]$k ^ 1.5)) * (0.083 * fitFrame[1,]$k + 0.65)
    fitFrame[1,]$OmaxD <- (fitFrame[1,]$q0 * (10^(fitFrame[1,]$k * (exp(-fitFrame[1,]$alpha * fitFrame[1,]$q0 * fitFrame[1,]$PmaxD) - 1)))) * fitFrame[1,]$PmaxD
  }

if (fittingFlag == 1)
{
    itemNames <- names(startList)
    index <- which(itemNames == "k")

    startList <- startList[-index]
    upperList <- upperList[-index]
    lowerList <- lowerList[-index]
}

for (i in 1:nSimulated)
{
  dataHolder <- NULL
  dataHolder <- SourceFrame[SourceFrame$p==i,]
  
  fit <- NULL

  if (fittingFlag == 1) {

	  try(fit <- wrapnls(data=dataHolder, y ~ q0 * 10^(fittedK * (exp(-alpha*q0*x)-1)), 
			start= startList,
			upper= upperList,
			lower= lowerList,
			trace=FALSE, 
			control = list(maxiter = 1000, smallsstest=FALSE, femax=10000, minFactor=0.000000000001)), 
	  silent=FALSE)

  } else if (fittingFlag == 2) {

	  try(fit <- wrapnls(data=dataHolder, y ~ q0 * 10^(k * (exp(-alpha*q0*x)-1)), 
			start= startList,
			upper= upperList,
			lower= lowerList,
			trace=FALSE, 
			control = list(maxiter = 1000, smallsstest=FALSE, femax=10000, minFactor=0.000000000001)), 
	  silent=FALSE)
  }
  
  if (!is.null(fit))
  {

    if (fittingFlag == 1) {
		fitFrameTemp[fitFrameTemp$p==i,]$alpha <- as.numeric(coef(fit)["alpha"])

		varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
		index <- which(varNames == "alpha")   
		fitFrameTemp[fitFrameTemp$p==i,]$alphaerr <- summary(fit)[[10]][index,2]    

		varNames <- attr(confint2(fit), "dimnames")[[1]]
		index <- which(varNames == "alpha")
		fitFrameTemp[fitFrameTemp$p==i,]$alow <- confint2(fit)[index,1]
		fitFrameTemp[fitFrameTemp$p==i,]$ahigh <- confint2(fit)[index,2]

		if (!is.null(FixedQ0)) {
		  fitFrameTemp[fitFrameTemp$p==i,]$q0 <- q0
		} else {
		  fitFrameTemp[fitFrameTemp$p==i,]$q0 <- as.numeric(coef(fit)["q0"])
		  varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
		  index <- which(varNames == "q0")         
		  fitFrameTemp[fitFrameTemp$p==i,]$q0err <- summary(fit)[[10]][index,2]
      
		  varNames <- attr(confint2(fit), "dimnames")[[1]]
		  index <- which(varNames == "q0")
		  fitFrameTemp[fitFrameTemp$p==i,]$q0low <- confint2(fit)[index,1]
		  fitFrameTemp[fitFrameTemp$p==i,]$q0high <- confint2(fit)[index,2]      
		}

		#fitFrameTemp[fitFrameTemp$p==i,]$q0 <- as.numeric(coef(fit)["q0"])
		#fitFrameTemp[fitFrameTemp$p==i,]$alpha <- as.numeric(coef(fit)["alpha"])
		fitFrameTemp[fitFrameTemp$p==i,]$k <- fittedK
		#fitFrameTemp[fitFrameTemp$p==i,]$q0err <- summary(fit)[[10]][1,2]
		#fitFrameTemp[fitFrameTemp$p==i,]$alphaerr <- summary(fit)[[10]][2,2]
		fitFrameTemp[fitFrameTemp$p==i,]$r2 <- 1.0 -(deviance(fit)/sum((dataHolder$y - mean(dataHolder$y))^2))
		fitFrameTemp[fitFrameTemp$p==i,]$absSS <- deviance(fit)
		fitFrameTemp[fitFrameTemp$p==i,]$sdResid <- sqrt(deviance(fit)/df.residual(fit))
		#fitFrameTemp[fitFrameTemp$p==i,]$q0low <- confint2(fit)[1]
		#fitFrameTemp[fitFrameTemp$p==i,]$q0high <- confint2(fit)[3]
		#fitFrameTemp[fitFrameTemp$p==i,]$alow <- confint2(fit)[2]
		#fitFrameTemp[fitFrameTemp$p==i,]$ahigh <- confint2(fit)[4]
		fitFrameTemp[fitFrameTemp$p==i,]$EV <- 1/(fitFrameTemp[fitFrameTemp$p==i,]$alpha * (fitFrameTemp[fitFrameTemp$p==i,]$k ^ 1.5) * 100)
		fitFrameTemp[fitFrameTemp$p==i,]$PmaxD <- 1/(fitFrameTemp[fitFrameTemp$p==i,]$q0 * fitFrameTemp[fitFrameTemp$p==i,]$alpha * (fitFrameTemp[fitFrameTemp$p==i,]$k ^ 1.5)) * (0.083 * fitFrameTemp[fitFrameTemp$p==i,]$k + 0.65)
		fitFrameTemp[fitFrameTemp$p==i,]$OmaxD <- (10^(log10(fitFrameTemp[fitFrameTemp$p==i,]$q0) + (fitFrameTemp[fitFrameTemp$p==i,]$k * (exp(-fitFrameTemp[fitFrameTemp$p==i,]$alpha * fitFrameTemp[fitFrameTemp$p==i,]$q0 * fitFrameTemp[fitFrameTemp$p==i,]$PmaxD) - 1)))) * fitFrameTemp[fitFrameTemp$p==i,]$PmaxD
		fitFrameTemp[fitFrameTemp$p==i,]$PmaxD <- 1/(fitFrameTemp[fitFrameTemp$p==i,]$q0 * fitFrameTemp[fitFrameTemp$p==i,]$alpha * (fitFrameTemp[fitFrameTemp$p==i,]$k ^ 1.5)) * (0.083 * fitFrameTemp[fitFrameTemp$p==i,]$k + 0.65)
		fitFrameTemp[fitFrameTemp$p==i,]$OmaxD <- (fitFrameTemp[fitFrameTemp$p==i,]$q0 * (10^(fitFrameTemp[fitFrameTemp$p==i,]$k * (exp(-fitFrameTemp[fitFrameTemp$p==i,]$alpha * fitFrameTemp[fitFrameTemp$p==i,]$q0 * fitFrameTemp[fitFrameTemp$p==i,]$PmaxD) - 1)))) * fitFrameTemp[fitFrameTemp$p==i,]$PmaxD

	  } else if (fittingFlag == 2) {
		fitFrameTemp[fitFrameTemp$p==i,]$alpha <- as.numeric(coef(fit)["alpha"])

		varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
		index <- which(varNames == "alpha")   
		fitFrameTemp[fitFrameTemp$p==i,]$alphaerr <- summary(fit)[[10]][index,2]    

		varNames <- attr(confint2(fit), "dimnames")[[1]]
		index <- which(varNames == "alpha")
		fitFrameTemp[fitFrameTemp$p==i,]$alow <- confint2(fit)[index,1]
		fitFrameTemp[fitFrameTemp$p==i,]$ahigh <- confint2(fit)[index,2]

		if (!is.null(FixedQ0)) {
		  fitFrameTemp[fitFrameTemp$p==i,]$q0 <- q0
		} else {
		  fitFrameTemp[fitFrameTemp$p==i,]$q0 <- as.numeric(coef(fit)["q0"])
		  varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
		  index <- which(varNames == "q0")         
		  fitFrameTemp[fitFrameTemp$p==i,]$q0err <- summary(fit)[[10]][index,2]
      
		  varNames <- attr(confint2(fit), "dimnames")[[1]]
		  index <- which(varNames == "q0")
		  fitFrameTemp[fitFrameTemp$p==i,]$q0low <- confint2(fit)[index,1]
		  fitFrameTemp[fitFrameTemp$p==i,]$q0high <- confint2(fit)[index,2]      
		}

		#fitFrameTemp[fitFrameTemp$p==i,]$q0 <- as.numeric(coef(fit)["q0"])
		#fitFrameTemp[fitFrameTemp$p==i,]$alpha <- as.numeric(coef(fit)["alpha"])
		fitFrameTemp[fitFrameTemp$p==i,]$k <- as.numeric(coef(fit)["k"])
		#fitFrameTemp[fitFrameTemp$p==i,]$q0err <- summary(fit)[[10]][1,2]
		#fitFrameTemp[fitFrameTemp$p==i,]$alphaerr <- summary(fit)[[10]][3,2]
		fitFrameTemp[fitFrameTemp$p==i,]$r2 <- 1.0 -(deviance(fit)/sum((dataHolder$y - mean(dataHolder$y))^2))
		fitFrameTemp[fitFrameTemp$p==i,]$absSS <- deviance(fit)
		fitFrameTemp[fitFrameTemp$p==i,]$sdResid <- sqrt(deviance(fit)/df.residual(fit))
		#fitFrameTemp[fitFrameTemp$p==i,]$q0low <- confint2(fit)[1]
		#fitFrameTemp[fitFrameTemp$p==i,]$q0high <- confint2(fit)[4]
		#fitFrameTemp[fitFrameTemp$p==i,]$alow <- confint2(fit)[3]
		#fitFrameTemp[fitFrameTemp$p==i,]$ahigh <- confint2(fit)[6]   
		fitFrameTemp[fitFrameTemp$p==i,]$EV <- 1/(fitFrameTemp[fitFrameTemp$p==i,]$alpha * (fitFrameTemp[fitFrameTemp$p==i,]$k ^ 1.5) * 100)
		fitFrameTemp[fitFrameTemp$p==i,]$PmaxD <- 1/(fitFrameTemp[fitFrameTemp$p==i,]$q0 * fitFrameTemp[fitFrameTemp$p==i,]$alpha * (fitFrameTemp[fitFrameTemp$p==i,]$k ^ 1.5)) * (0.083 * fitFrameTemp[fitFrameTemp$p==i,]$k + 0.65)
		fitFrameTemp[fitFrameTemp$p==i,]$OmaxD <- (fitFrameTemp[fitFrameTemp$p==i,]$q0 * (10^(fitFrameTemp[fitFrameTemp$p==i,]$k * (exp(-fitFrameTemp[fitFrameTemp$p==i,]$alpha * fitFrameTemp[fitFrameTemp$p==i,]$q0 * fitFrameTemp[fitFrameTemp$p==i,]$PmaxD) - 1)))) * fitFrameTemp[fitFrameTemp$p==i,]$PmaxD

	  }    
  }
}