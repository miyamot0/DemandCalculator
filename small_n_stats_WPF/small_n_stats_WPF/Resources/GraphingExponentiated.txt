# 
#    Copyright 2016 Shawn Gilroy
#
#    This file is part of Demand Analysis.
#
#    Demand Analysis is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Demand Analysis is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Demand Analysis.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#

xDraw <- seq(min(SourceFrame$x), max(SourceFrame$x), 0.1)

p.rep <- seq(1,max(SourceFrame$p),1)

graphFrame<-data.frame(
  Individual=rep(seq(min(p.rep), max(p.rep),1),each=length(xDraw)),
  DemandSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  YSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  XSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  OSeries=rep(NA,length(p.rep))
)

for (j in 1:max(SourceFrame$p))
{
  for (i in 1:length(xDraw))
  {
    qTemp <- fitFrame[1,]$q0
    aTemp <- fitFrame[1,]$alpha
    kTemp <- fitFrame[1,]$k

    graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$YSeries <- qTemp * 10^(kTemp * (exp(-aTemp*qTemp*xDraw[i])-1))
    graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$XSeries <- xDraw[i]
	graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$OSeries <- xDraw[i] * (qTemp * 10^(kTemp * (exp(-aTemp*qTemp*xDraw[i])-1)))
  }
}

pointFrame <- data.frame(X=SourceFrame$x, Y=SourceFrame$y, Individual=SourceFrame$p)
pointFrame$exp <- pointFrame$X * pointFrame$Y

logChart <- ggplot() +
  geom_point(data=pointFrame, aes(x=pointFrame$X, y=pointFrame$Y, shape=factor(Individual))) +
  scale_colour_continuous(guide = FALSE) +
  geom_line(data=graphFrame, aes(x=XSeries, y=YSeries, group=Individual, colour = factor(Individual))) + 
  scale_color_manual("Outputs\n", labels = c("Exponential Demand Curve"), values = c("#B40A0A")) +
  expand_limits(y=0) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  geom_text(aes(x=graphingPmax, label=textPmax, y=0), colour="blue", angle=90, hjust = 0) +
  ggtitle("Fitted Demand Curves\n") +
  ylab("Consumption") +
  scale_x_log10(
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(.x))
  ) + 
  annotation_logticks(sides = "b") +
  xlab("log10(Price)") +
  theme(legend.title = element_blank()) +
  theme(legend.position = "none") +
  theme(legend.direction = "vertical") + 
  theme(panel.grid.minor = element_blank()) +
  theme(panel.grid.major = element_blank()) +
  guides(col = guide_legend(ncol = 3))

workChart <- ggplot() +
  geom_point(data=pointFrame, aes(x=pointFrame$X, y=pointFrame$exp, shape=factor(Individual))) +
  expand_limits(y=0) +  
  scale_color_manual(values=c("#781FB7")) +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  geom_text(aes(x=min(pointFrame$X), label=textOmax, y=graphingOmax), colour="blue", angle=0, hjust = 0) +
  geom_text(aes(x=graphingPmax, label=textPmax, y=0), colour="blue", angle=90, hjust = 0) +
  ggtitle("Output Curve\n") +
  expand_limits(y=0) +
  ylab("Consumption") +
  scale_x_log10(
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(.x))
  ) + 
  xlab("log(Price)") +
  theme(legend.title = element_blank()) +
  theme(legend.position = "none") +
  theme(legend.direction = "vertical") + 
  theme(panel.grid.minor = element_blank()) +
  theme(panel.grid.major = element_blank()) 

  workChart <- workChart + geom_line(data=graphFrame, aes(x=XSeries, y=OSeries, group=Individual, colour = factor(Individual)))
  svg(tempf1 <- tempfile(fileext = '.svg'), width = 9, height = 9)  print(logChart)
  dev.off()

  svg(tempf2 <- tempfile(fileext = '.svg'), width = 9, height = 9)
  print(workChart)
  dev.off()

  require('base64enc')
  demandString <- base64encode(readBin(tempf1, 'raw', file.info(tempf1)[1, 'size']), 'txt')
  workString <- base64encode(readBin(tempf2, 'raw', file.info(tempf2)[1, 'size']), 'txt')

  unlink(tempf1)
  unlink(tempf2)