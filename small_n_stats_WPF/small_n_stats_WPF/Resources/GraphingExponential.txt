# 
#    Copyright 2016 Shawn Gilroy
#
#    This file is part of Demand Analysis.
#
#    Demand Analysis is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Demand Analysis is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Demand Analysis.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#

xDraw <- seq(min(SourceFrame$x), max(SourceFrame$x), 0.1)

p.rep <- seq(1,max(SourceFrame$p),1)

graphFrame<-data.frame(
  Individual=rep(seq(min(p.rep), max(p.rep),1),each=length(xDraw)),
  DemandSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  YSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  XSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  OSeries=rep(NA,length(p.rep))
)

for (j in 1:max(SourceFrame$p))
{
  for (i in 1:length(xDraw))
  {
    qTemp <- fitFrame[1,]$q0
    aTemp <- fitFrame[1,]$alpha
    kTemp <- fitFrame[1,]$k
    
    graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$YSeries <- log10(qTemp) + kTemp * (exp(-aTemp*qTemp*xDraw[i])-1)
    graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$XSeries <- xDraw[i]
	graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$OSeries <- xDraw[i] * 10^(log10(qTemp) + kTemp * (exp(-aTemp*qTemp*xDraw[i])-1))
  }
}

axis_mod <- function(l) { 
  l <- paste("", l, sep = "")  
  parse(text=l) 
} 

pointFrame <- data.frame(X=SourceFrame$x, Y=SourceFrame$y, Individual=SourceFrame$p)
pointFrame$exp <- pointFrame$X * pointFrame$Y

# return to normal space
graphFrame$YSeries <- 10^graphFrame$YSeries
pointFrame$Y <- 10^pointFrame$Y

empPtop <- 10^(log10(qTemp) + kTemp * (exp(-aTemp*qTemp*empP)-1))
derPtop <- 10^(log10(qTemp) + kTemp * (exp(-aTemp*qTemp*derP)-1))

logChart <- ggplot(graphFrame,aes(x=XSeries,y=YSeries)) + 
  geom_line() + 
  geom_point(data=pointFrame, aes(x=pointFrame$X, y=log10(pointFrame$Y)), size=2, shape=21, show.legend=F) +
  scale_x_log10(breaks=c(0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000),
                labels=c(0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000)) +
  scale_y_log10(breaks=c(0.01, 0.1, 1, 10, 100, 1000, 10000, 100000),
                labels=c(0.01, 0.1, 1, 10, 100, 1000, 10000, 100000)) +
  geom_segment(aes(x=empP, xend=empP, y=0, yend=empPtop, linetype="black3"), inherit.aes=FALSE, show.legend = T) +
  geom_segment(aes(x=derP, xend=derP, y=0, yend=derPtop, linetype="black4"), inherit.aes=FALSE, show.legend = T) +
  scale_linetype_manual("", labels=c("Empirical Pmax  ", "Derived Pmax  "), values = c("solid", "dashed")) +  
  coord_cartesian(ylim=c(0.1, max(SourceFrame$y))) +
  annotation_logticks() +
  theme(panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = "white", 
                                    fill=FALSE, 
                                    size=0),
        axis.line.x = element_line(colour = "black"),
        axis.line.y = element_line(colour = "black"),
		axis.text.x=element_text(colour="black"),
		axis.text.y=element_text(colour="black"),
		text = element_text(size=16),
        legend.position = "bottom",
        legend.key = element_rect(fill = "transparent", colour = "transparent")) +
  labs(x = "Unit Price", y = "Consumption")

#workChart <- ggplot() +
#  geom_point(data=pointFrame, aes(x=pointFrame$X, y=pointFrame$exp, shape=factor(Individual))) +
#  expand_limits(y=0) +  
#  scale_color_manual(values=c("#781FB7")) +
#  theme_bw() +
#  theme(panel.grid.minor = element_blank()) +
#  geom_text(aes(x=min(pointFrame$X), label=textOmax, y=graphingOmax), colour="blue", angle=0, hjust = 0) +
#  geom_text(aes(x=graphingPmax, label=textPmax, y=0), colour="blue", angle=90, hjust = 0) +
#  ggtitle("Output Curve\n") +
#  expand_limits(y=0) +
#  ylab("Consumption") +
#  scale_x_log10(
#    breaks = scales::trans_breaks("log10", function(x) 10^x),
#    labels = scales::trans_format("log10", scales::math_format(.x))
#  ) + 
#  xlab("log(Price)") +
#  theme(legend.title = element_blank()) +
#  theme(legend.position = "none") +
#  theme(legend.direction = "vertical") + 
#  theme(panel.grid.minor = element_blank()) +
#  theme(panel.grid.major = element_blank()) 

#  workChart <- workChart + geom_line(data=graphFrame, aes(x=XSeries, y=OSeries, group=Individual, colour = factor(Individual)))

  svg(tempf1 <- tempfile(fileext = '.svg'))
  print(logChart)
  dev.off()

#  svg(tempf2 <- tempfile(fileext = '.svg'), width = 9, height = 9)
#  print(workChart)
#  dev.off()

  require('base64enc')
  demandString <- base64encode(readBin(tempf1, 'raw', file.info(tempf1)[1, 'size']), 'txt')
#  workString <- base64encode(readBin(tempf2, 'raw', file.info(tempf2)[1, 'size']), 'txt')

  unlink(tempf1)
#  unlink(tempf2)
