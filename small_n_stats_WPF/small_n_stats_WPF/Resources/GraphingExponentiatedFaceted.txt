# 
#    Copyright 2016 Shawn Gilroy
#
#    This file is part of Demand Analysis.
#
#    Demand Analysis is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Demand Analysis is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Demand Analysis.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#

xDraw <- seq(min(SourceFrame$x), max(SourceFrame$x), 0.1)
xDraw <- xDraw[ xDraw != 0 ] 

p.rep <- seq(1,max(SourceFrame$p),1)

graphFrame<-data.frame(
  Individual=rep(seq(min(p.rep), max(p.rep),1),each=length(xDraw)),
  DemandSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  YSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  XSeries=rep(seq(1:length(xDraw)-1),length(p.rep)),
  OSeries=rep(NA,length(p.rep))
)

for (j in 1:max(SourceFrame$p))
{
  for (i in 1:length(xDraw))
  {
    qTemp <- fitFrame[1,]$q0
    aTemp <- fitFrame[1,]$alpha
    kTemp <- fitFrame[1,]$k

    graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$YSeries <- qTemp * 10^(kTemp * (exp(-aTemp*qTemp*xDraw[i])-1))
    graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$XSeries <- xDraw[i]
	graphFrame[ graphFrame$Individual==j & graphFrame$DemandSeries==as.numeric(i),]$OSeries <- xDraw[i] * (qTemp * 10^(kTemp * (exp(-aTemp*qTemp*xDraw[i])-1)))
  }
}

pointFrame <- data.frame(X=SourceFrame$x, Y=SourceFrame$y, Individual=SourceFrame$p)
pointFrame$exp <- pointFrame$X * pointFrame$Y

pointFrame$Y <- 10^pointFrame$Y
pointFrame$mask <- 1

pointFrame[pointFrame$X == 0,]$mask <- 0
pointFrame[pointFrame$X == 0,]$X <- 0.00001

graphFrame$premask = 1
graphFrame$mask = 1

empPtop <- 10^(log10(qTemp) + kTemp * (exp(-aTemp*qTemp*empP)-1))
derPtop <- 10^(log10(qTemp) + kTemp * (exp(-aTemp*qTemp*derP)-1))

empiricalFrame <- data.frame(Xs=empP, Xe=empP, Ys=0, Ye=empPtop, mask=1)
derivedFrame <- data.frame(Xs=derP, Xe=derP, Ys=0, Ye=derPtop, mask=1)

annotation_logticks2 <- function(base = 10, sides = "bl", scaled = TRUE,
                                short = unit(0.1, "cm"), 
                                mid = unit(0.2, "cm"), 
                                long = unit(0.3, "cm"),
                                colour = "black", 
                                size = 0.5, 
                                linetype = 1, 
                                alpha = 1, 
                                data =data.frame(x = NA),
                                color = NULL, ...) {
  if (!is.null(color))
    colour <- color
  
  layer(
    data = data,
    mapping = NULL,
    stat = StatIdentity,
    geom = GeomLogticks,
    position = PositionIdentity,
    show.legend = FALSE,
    inherit.aes = FALSE,
    params = list(
      base = base,
      sides = sides,
      scaled = scaled,
      short = short,
      mid = mid,
      long = long,
      colour = colour,
      size = size,
      linetype = linetype,
      alpha = alpha,
      ...
    )
  )
}

logChart <- ggplot(pointFrame,aes(x=X,y=Y)) +
  geom_point(data=pointFrame, aes(x=pointFrame$X, y=log10(pointFrame$Y)), size=2, shape=21, show.legend=F) +
  facet_grid(.~mask, scales="free_x", space="free") +  
  geom_line(data=graphFrame, aes(x=XSeries,y=YSeries)) +
  scale_x_log10(breaks=c(0.00001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000),
                labels=c("QFree",  0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000)) +
  scale_y_log10(breaks=c(0.01, 0.1, 1, 10, 100, 1000, 10000, 100000),
                labels=c(0.01, 0.1, 1, 10, 100, 1000, 10000, 100000)) +
  geom_segment(data=empiricalFrame, aes(x=Xs, xend=Xe, y=Ys, yend=Ye, linetype="black3"), inherit.aes=FALSE, show.legend = T) +
  geom_segment(data=derivedFrame, aes(x=Xs, xend=Xe, y=Ys, yend=Ye, linetype="black4"), inherit.aes=FALSE, show.legend = T) +
  scale_linetype_manual("", labels=c("Empirical Pmax  ", "Derived Pmax  "), values = c("solid", "dashed")) +  
  coord_cartesian(ylim=c(0.1, max(SourceFrame$y))) +
  theme(strip.background = element_blank(), 
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = "white", 
                                    fill=FALSE, 
                                    size=0),
        axis.line.x = element_line(colour = "black"),
        axis.line.y = element_line(colour = "black"),
		axis.text.x=element_text(colour="black"),
		axis.text.y=element_text(colour="black"),
		text = element_text(size=16),
        legend.position = "bottom",
        legend.key = element_rect(fill = "transparent", colour = "transparent")) + 
    annotation_logticks2(sides="l", data = data.frame(X= NA, mask = 0)) +
    annotation_logticks2(sides="b", data = data.frame(X= NA, mask = 1)) +
    labs(x = "Unit Price", y = "Consumption")

#workChart <- ggplot() +
#  geom_point(data=pointFrame, aes(x=pointFrame$X, y=pointFrame$exp, shape=factor(Individual))) +
#  expand_limits(y=0) +  
#  scale_color_manual(values=c("#781FB7")) +
#  theme_bw() +
#  theme(panel.grid.minor = element_blank()) +
#  geom_text(aes(x=min(pointFrame$X), label=textOmax, y=graphingOmax), colour="blue", angle=0, hjust = 0) +
#  geom_text(aes(x=graphingPmax, label=textPmax, y=0), colour="blue", angle=90, hjust = 0) +
#  ggtitle("Output Curve\n") +
#  expand_limits(y=0) +
#  ylab("Consumption") +
#  scale_x_log10(
#    breaks = scales::trans_breaks("log10", function(x) 10^x),
#    labels = scales::trans_format("log10", scales::math_format(.x))
#  ) + 
#  xlab("log(Price)") +
#  theme(legend.title = element_blank()) +
#  theme(legend.position = "none") +
#  theme(legend.direction = "vertical") + 
#  theme(panel.grid.minor = element_blank()) +
#  theme(panel.grid.major = element_blank()) 

#  workChart <- workChart + geom_line(data=graphFrame, aes(x=XSeries, y=OSeries, group=Individual, colour = factor(Individual)))
  svg(tempf1 <- tempfile(fileext = '.svg'), width = 9, height = 9)  print(logChart)
  dev.off()

#  svg(tempf2 <- tempfile(fileext = '.svg'), width = 9, height = 9)
#  print(workChart)
#  dev.off()

  require('base64enc')
  demandString <- base64encode(readBin(tempf1, 'raw', file.info(tempf1)[1, 'size']), 'txt')
#  workString <- base64encode(readBin(tempf2, 'raw', file.info(tempf2)[1, 'size']), 'txt')

  unlink(tempf1)
#  unlink(tempf2)