# 
#    Copyright 2016 Shawn Gilroy
#
#    This file is part of Demand Analysis.
#
#    Demand Analysis is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Demand Analysis is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Demand Analysis.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#
#    Demand Analysis incorporates source from Beezdemand to compute the following  
#    demand measures:
#        OmaxE
#        PmaxE
#        Q0e
#        BP0
#        BP1
#        EV
#        OmaxD
#        PmaxD
#
#    ================================================================================
# 
#    Beezdemand is distributed under this license:
#
#    Copyright 2016 Brent Kaplan
#
#    Beezdemand is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2.
#
#    Beezdemand is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Beezdemand.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#

SourceFrame <- data.frame(
  p=pLoad,
  y=yLoad,
  x=xLoad,
  k=kLoad,
  g=gLoad)

nSimulated <- length(SourceFrame$p)

fitFrame <- data.frame(
  p=seq(1,nSimulated,1),
  g=rep(NA,nSimulated),
  q0=rep(NA,nSimulated),
  q0err=rep(NA,nSimulated),
  alpha=rep(NA,nSimulated),
  alphaerr=rep(NA,nSimulated),
  k=rep(NA,nSimulated),
  r2=rep(NA,nSimulated),
  absSS=rep(NA,nSimulated),
  sdResid=rep(NA,nSimulated),
  q0low=rep(NA,nSimulated),
  q0high=rep(NA,nSimulated),
  alow=rep(NA,nSimulated),
  ahigh=rep(NA,nSimulated),
  OmaxE=rep(NA,nSimulated),
  PmaxE=rep(NA,nSimulated),
  Q0e=rep(NA,nSimulated),
  BP0=rep(NA,nSimulated),
  BP1=rep(NA,nSimulated),
  EV=rep(NA,nSimulated),
  OmaxD=rep(NA,nSimulated),
  PmaxD=rep(NA,nSimulated),
  AIC=rep(NA,nSimulated),
  BIC=rep(NA,nSimulated))

for (i in 1:nSimulated)
{
  dataHolder <- NULL
  dataHolder <- SourceFrame[SourceFrame$p==i,]
  dataHolder$expend <- (dataHolder$x * dataHolder$y)
  
  ### These measures computed even if model fails/is not appropriate

  fitFrame[fitFrame$p==i,]$OmaxE <- max(dataHolder$expend)
  fitFrame[fitFrame$p==i,]$PmaxE <- max(dataHolder[dataHolder$expend == max(dataHolder$expend),]$x)

  xMin <- min(dataHolder$x)

  fitFrame[fitFrame$p==i,]$Q0e <- min(dataHolder[dataHolder$x == xMin,]$y)
  
  if (length(dataHolder[dataHolder$y == 0,]$x) > 0)
  {
	fitFrame[fitFrame$p==i,]$BP0 <- min(dataHolder[dataHolder$y == 0,]$x)
  }

  if (sum(dataHolder$y > 0))
  {
	fitFrame[fitFrame$p==i,]$BP1 <- max(dataHolder[dataHolder$y != 0,]$x)
  }

  ###
  startList <- list(q0=3, alpha=0.000000001)
  upperList <- c(q0=maxQ0, alpha = 1)
  lowerList <- c(q0=minQ0, alpha = -1)

  if (!is.null(FixedQ0))
  {
    q0 <<- FixedQ0  
    
    itemNames <- names(startList)
    index <- which(itemNames == "q0")

    startList <- startList[-index]
    upperList <- upperList[-index]
    lowerList <- lowerList[-index]
  }

  #cat(paste(c("The start values are: ", startList, "\n"), collapse=" "))
  #cat(paste(c("The upper values are: ", upperList, "\n"), collapse=" "))  
  #cat(paste(c("The lower values are: ", lowerList, "\n"), collapse=" "))
  #cat(paste(c("The name values are: ", names(startList), "\n"), collapse=" "))  
  #cat(paste(c("The data Values are: ", dataHolder, "\n"), collapse=" "))
  ###

  fit <- NULL
  try(fit <- wrapnls(data=dataHolder, y ~ q0 * 10^(k * (exp(-alpha*q0*x)-1)), 
	start= startList,
	upper= upperList,
	lower= lowerList,
	control = list(maxiter = 1000)), silent=TRUE)

  if (!is.null(fit))
  {
      fitFrame[fitFrame$p==i,]$alpha <- as.numeric(coef(fit)["alpha"])

	  varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
      index <- which(varNames == "alpha")   
      fitFrame[fitFrame$p==i,]$alphaerr <- summary(fit)[[10]][index,2]   

      varNames <- attr(confint2(fit), "dimnames")[[1]]
      index <- which(varNames == "alpha")
      fitFrame[fitFrame$p==i,]$alow <- confint2(fit)[index,1]
      fitFrame[fitFrame$p==i,]$ahigh <- confint2(fit)[index,2]

      if (!is.null(FixedQ0)) {
        fitFrame[fitFrame$p==i,]$q0 <- q0
      } else {
        fitFrame[fitFrame$p==i,]$q0 <- as.numeric(coef(fit)["q0"])
        varNames <- attr(summary(fit)$coefficients, "dimnames")[[1]]
        index <- which(varNames == "q0")         
        fitFrame[fitFrame$p==i,]$q0err <- summary(fit)[[10]][index,2]
      
        varNames <- attr(confint2(fit), "dimnames")[[1]]
        index <- which(varNames == "q0")
        fitFrame[fitFrame$p==i,]$q0low <- confint2(fit)[index,1]
        fitFrame[fitFrame$p==i,]$q0high <- confint2(fit)[index,2]      
      }

	  #fitFrame[fitFrame$p==i,]$q0 <- as.numeric(coef(fit)["q0"])
	  #fitFrame[fitFrame$p==i,]$alpha <- as.numeric(coef(fit)["alpha"])
	  fitFrame[fitFrame$p==i,]$k <- min(SourceFrame$k)
	  #fitFrame[fitFrame$p==i,]$q0err <- summary(fit)[[10]][1,2]
	  #fitFrame[fitFrame$p==i,]$alphaerr <- summary(fit)[[10]][2,2]
	  fitFrame[fitFrame$p==i,]$r2 <- 1.0 -(deviance(fit)/sum((SourceFrame[SourceFrame$p==i,]$y-mean(SourceFrame[SourceFrame$p==i,]$y))^2))
	  fitFrame[fitFrame$p==i,]$absSS <- deviance(fit)  
	  fitFrame[fitFrame$p==i,]$sdResid <- sqrt(deviance(fit)/df.residual(fit))
	  #fitFrame[fitFrame$p==i,]$q0low <- confint2(fit)[1]
	  #fitFrame[fitFrame$p==i,]$q0high <- confint2(fit)[3]
	  #fitFrame[fitFrame$p==i,]$alow <- confint2(fit)[2]
	  #fitFrame[fitFrame$p==i,]$ahigh <- confint2(fit)[4]  
	  fitFrame[fitFrame$p==i,]$AIC<-AIC(fit)
	  fitFrame[fitFrame$p==i,]$BIC<-BIC(fit)

	  fitFrame[fitFrame$p==i,]$EV <- 1/(fitFrame[fitFrame$p==i,]$alpha * (fitFrame[fitFrame$p==i,]$k ^ 1.5) * 100)
	  fitFrame[fitFrame$p==i,]$PmaxD <- 1/(fitFrame[fitFrame$p==i,]$q0 * fitFrame[fitFrame$p==i,]$alpha * (fitFrame[fitFrame$p==i,]$k ^ 1.5)) * (0.083 * fitFrame[fitFrame$p==i,]$k + 0.65)
      fitFrame[fitFrame$p==i,]$OmaxD <- (fitFrame[fitFrame$p==i,]$q0 * (10^(fitFrame[fitFrame$p==i,]$k * (exp(-fitFrame[fitFrame$p==i,]$alpha * fitFrame[fitFrame$p==i,]$q0 * fitFrame[fitFrame$p==i,]$PmaxD) - 1)))) * fitFrame[fitFrame$p==i,]$PmaxD
  }
}
