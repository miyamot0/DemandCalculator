<Window x:Class="small_n_stats_WPF.Views.BatchDemandCurveWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:small_n_stats_WPF.Views"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:settings="clr-namespace:small_n_stats_WPF.Properties"
        mc:Ignorable="d"
        Title="Batch Demand Curve Fitting" 
        Height="525"
        Top="{Binding Source={x:Static settings:Settings.Default}, 
                Path=DemandTop, 
                Mode=TwoWay}" 
        Left="{Binding Source={x:Static settings:Settings.Default}, 
                Path=DemandLeft, 
                Mode=TwoWay}"
        Width="425">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding ViewLoadedCommand}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ViewClosingCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.Style>
        <Style TargetType="Window">
            <Style.Triggers>
                <DataTrigger Binding="{Binding AdvancedMenu}"  Value="True">
                    <Setter Property="MinWidth" Value="850"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>

    <!-- Grid with two sides, basic and an optional advanced view -->
    <Grid>

        <!-- Checkbox to disable after click -->
        <Grid.Resources>
            <Style TargetType="CheckBox" x:Key="unlockingKey">
                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="IsEnabled" Value="False" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>

        <!-- Pre-sized main display, advanced window to claim unused space on resize -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="400"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>

        <Grid Grid.Column="0"
              Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="40"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="75"></RowDefinition>
                <RowDefinition Height="75"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100"></ColumnDefinition>
                <ColumnDefinition Width="100"></ColumnDefinition>
                <ColumnDefinition Width="100"></ColumnDefinition>
                <ColumnDefinition Width="100"></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <TextBlock
                x:Name="windowTitle"
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="4"
                FontSize="18"
                Text="Demand Curve Analysis"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
            </TextBlock>

            <Button Grid.Row="1" 
                    Grid.Column="0"
                    Margin="10"
                    Content="Pricing"
                    Command="{Binding GetXRangeCommand}">
            </Button>

            <TextBox
                Name="xRange"
                Grid.Row="1" 
                Grid.Column="1"
                Grid.ColumnSpan="3"
                IsReadOnly="True"
                Margin="10"
                VerticalContentAlignment="Center"
                Text="{Binding XRangeValues}"
                Background="{Binding Path=XBrush}">
                <TextBox.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Manually Type Range" Command="{Binding PricingRangeCommand}" />
                    </ContextMenu>
                </TextBox.ContextMenu>
            </TextBox>

            <Button Grid.Row="2" 
                    Grid.Column="0"
                    Margin="10"
                    Content="Consumption"
                    Command="{Binding GetYRangeCommand}">
            </Button>

            <TextBox
                Name="yRange"
                Grid.Row="2" 
                Grid.Column="1"
                Grid.ColumnSpan="3"
                IsReadOnly="True"
                Margin="10"
                VerticalContentAlignment="Center"
                Text="{Binding YRangeValues}"
                Background="{Binding Path=YBrush}">
                <TextBox.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Manually Type Range" Command="{Binding ConsumptionRangeCommand}" />
                    </ContextMenu>
                </TextBox.ContextMenu>
            </TextBox>
          
            <!-- Check Box Controls Left -->

            <Label
                Grid.Row="3"
                Grid.Column="0"
                Content="Mode"
                HorizontalContentAlignment="Center"
                VerticalContentAlignment="Center">
            </Label>
            
            <ComboBox 
                Grid.Row="3"
                Grid.Column="1"
                Margin="5"
                Padding="10,0,0,0"
                HorizontalContentAlignment="Left"
                VerticalContentAlignment="Center"
                SelectedValuePath="Content"
                SelectedValue="{Binding SelectedMode}"
                IsSynchronizedWithCurrentItem="True">
                <ComboBoxItem IsSelected="True">Individual</ComboBoxItem>
                <ComboBoxItem>Group</ComboBoxItem>
            </ComboBox>
            
            <StackPanel
            Orientation="Horizontal"
            Grid.Row="3"
            Grid.Column="2"
            Grid.ColumnSpan="2"
            VerticalAlignment="Center"
            HorizontalAlignment="Right"
            Margin="0,0,25,0">
                <Label Content="Advanced Settings?"/>
                <CheckBox
                    Grid.Row="4"
                    Grid.Column="2"
                    Grid.ColumnSpan="2"
                    Margin="5,0,0,0"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Left"
                    Style="{DynamicResource unlockingKey}"
                    Content="">


                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Checked">
                            <i:InvokeCommandAction Command="{Binding Path=AdvancedSettings}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="Unchecked">
                            <i:InvokeCommandAction Command="{Binding Path=AdvancedSettings}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>


                </CheckBox>
            </StackPanel>

            <FlowDocumentScrollViewer
                Grid.Column="0"
                Grid.ColumnSpan="4"
                Grid.Row="4"
                Grid.RowSpan="3"
                IsSelectionEnabled="False"
                VerticalScrollBarVisibility="Hidden">
                <FlowDocument>
                    <FlowDocument.Resources>
                        <Style TargetType="{x:Type Paragraph}">
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="Padding" Value="0"/>
                        </Style>
                    </FlowDocument.Resources>
                    <Paragraph FontSize="12" FontFamily="Segoe UI">
                        <Bold>Directions:</Bold>
                    </Paragraph>
                    <Paragraph FontSize="12" FontFamily="Segoe UI" Padding="0,5,0,0">
                        The fitting of demand curves requires that users select a range of 
                        Pricing Values (one row) that correspond with a range of 
                        Consumption Values (many rows).  Small n Stats can calculate
                        both the Exponential Demand Function (Hursh &amp; Silverburg, 2008) 
                        as well as the Exponentiated Demand Function (Koffarnus, Franck, Stein
                        &amp; Bickel, 2015).
                    </Paragraph>
                    <Paragraph FontSize="12" FontFamily="Segoe UI" Padding="0,5,0,0">
                        By default, k values are derived from each prior to each analysis unless
                        otherwise specified. For exponential modeling, zero pricing points are 
                        adjusted from 0.0 to 0.01 by default and zero consumption values are 
                        dropped entirely.
                    </Paragraph>
                </FlowDocument>
            </FlowDocumentScrollViewer>

            <Button Name="calculateButton" 
                    Grid.Row="7" 
                    Grid.Column="0"
                    Grid.ColumnSpan="4"
                    Margin="10"
                    Content="Calculate"
                    Command="{Binding CalculateScoresCommand}">
            </Button>
        </Grid>

        <!-- Advanced Settings Grid -->

        <Grid Grid.Column="1"              
              Grid.Row="0"
              x:Name="AdvWindow">

            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding AdvancedMenu}"
                                     Value="False">
                            <Setter Property="Visibility" 
                                    Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding AdvancedMenu}" 
                                     Value="True">
                            <Setter Property="Visibility" 
                                    Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="150"></ColumnDefinition>
                <ColumnDefinition Width="50"></ColumnDefinition>
                <ColumnDefinition Width="100"></ColumnDefinition>
                <ColumnDefinition Width="100"></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <TextBlock
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="4"
                FontSize="18"
                Text="Advanced Settings"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
            </TextBlock>

            <Button Name="kButton" 
                    Grid.Row="1" 
                    Grid.Column="0"
                    Margin="25,10,25,10"
                    Content="Set k Range"
                    Command="{Binding GetKRangeCommand}">
            </Button>

            <TextBox
                Name="kRange"
                Grid.Row="1" 
                Grid.Column="1"
                Grid.ColumnSpan="3"
                IsReadOnly="True"
                Margin="10"
                VerticalContentAlignment="Center"
                Text="{Binding KRangeValues}"
                Background="{Binding Path=KBrush}">
                <TextBox.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Manually Type Range" Command="{Binding ConstantRangeCommand}" />
                    </ContextMenu>
                </TextBox.ContextMenu>
            </TextBox>

            <FlowDocumentScrollViewer Grid.Column="0"
                                      Grid.ColumnSpan="4"
                                      Grid.Row="2"
                                      Grid.RowSpan="2"
                                      IsSelectionEnabled="False"
                                      VerticalContentAlignment="Top"
                                      VerticalScrollBarVisibility="Hidden">
                <FlowDocument>
                    <FlowDocument.Resources>
                        <Style TargetType="{x:Type Paragraph}">
                            <Setter Property="Margin" 
                                    Value="0"/>
                            <Setter Property="Padding" 
                                    Value="0"/>
                        </Style>
                    </FlowDocument.Resources>
                    <Paragraph FontSize="12" FontFamily="Segoe UI">
                        <Bold>Individualize k values:</Bold>
                    </Paragraph>
                    <Paragraph 
                        FontSize="12" 
                        FontFamily="Segoe UI" 
                        Padding="0,5,0,0">
                        Small n Stats can calculate can incorporate individual k values for each analysis.  This
                        is an alternative to selecting a single k value for all comparisons.
                    </Paragraph>
                </FlowDocument>
            </FlowDocumentScrollViewer>

            <FlowDocumentScrollViewer Grid.Column="0"
                                      Grid.ColumnSpan="4"
                                      Grid.Row="5"
                                      Grid.RowSpan="4"
                                      IsSelectionEnabled="False"
                                      VerticalContentAlignment="Top"
                                      VerticalScrollBarVisibility="Hidden">
                <FlowDocument>
                    <FlowDocument.Resources>
                        <Style TargetType="{x:Type Paragraph}">
                            <Setter Property="Margin" 
                                    Value="0"/>
                            <Setter Property="Padding" 
                                    Value="0"/>
                        </Style>
                    </FlowDocument.Resources>
                    <Paragraph FontSize="12" FontFamily="Segoe UI">
                        <Bold>Alternative Demand Curve Models:</Bold>
                    </Paragraph>
                    <Paragraph 
                        FontSize="12" 
                        FontFamily="Segoe UI" 
                        Padding="0,5,0,0">
                        Small n Stats can calculate is capable of fitting both the Exponential 
                        Demand Function (Hursh &amp; Silverburg, 2008) and Exponentiated Demand 
                        Function (Koffarnus, Franck, Stein &amp; Bickel, 2015).  
                        You may select either below.
                    </Paragraph>

                    <Paragraph 
                        FontSize="12" 
                        FontFamily="Segoe UI" 
                        Padding="0,5,0,0">
                        Output metrics for each individual model will be equivalent, though
                        careful consideration is warranted given the specific nature of your
                        research question and design.
                    </Paragraph>

                    <Paragraph 
                        FontSize="12" 
                        FontFamily="Segoe UI" 
                        Padding="0,5,0,0">
                        For a more in-depth review of these differences, please review the work
                        from Koffarnus et. al., 2015.
                    </Paragraph>
                </FlowDocument>
            </FlowDocumentScrollViewer>

            <Label Grid.Row="4" 
                   Grid.Column="0"
                   Margin="10"
                   HorizontalAlignment="Center"
                   FontWeight="Bold"
                   Content="Model:">
            </Label>

            <ComboBox Name="selectedModel"
                      SelectedValuePath="Content"
                      SelectedValue="{Binding ModelArraySelection}"
                      Grid.Row="4" 
                      Grid.Column="1"
                      Grid.ColumnSpan="3"
                      Margin="10"
                      VerticalContentAlignment="Center"
                      IsSynchronizedWithCurrentItem="True">
                      <ComboBoxItem IsSelected="True">Exponential</ComboBoxItem>
                      <ComboBoxItem>Exponentiated</ComboBoxItem>
            </ComboBox>
        </Grid>
    </Grid>
</Window>